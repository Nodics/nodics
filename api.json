{ nodics:
   { metaData:
      { name: 'nodics',
        index: '0',
        description: 'Nodics, An Node based enterprise application solution',
        homepage: 'http://www.nodics.com/nodics/',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        scripts: {},
        repository: [Object],
        dependencies: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics' },
  framework:
   { metaData:
      { name: 'framework',
        index: '20',
        description: 'Nodics configuration module. It will hold all framework moduls and services',
        homepage: 'http://www.nodics.com/nodics/framework/',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework' },
  ncommon:
   { metaData:
      { name: 'ncommon',
        index: '2',
        description: 'Nodics configuration module. It will hold all common and environment specific configuration',
        homepage: 'http://www.nodics.com/nodics/framework/ncommon',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        contributors: [],
        dependencies: [],
        repository: [Object],
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License' },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework\\nCommon' },
  nconfig:
   { metaData:
      { name: 'nconfig',
        index: '1',
        description: 'Nodics configuration module. It will hold all common and environment specific configuration',
        homepage: 'http://www.nodics.com/nodics/framework/nconfig',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework\\nConfig' },
  ndao:
   { metaData:
      { name: 'ndao',
        index: '4',
        description: 'This module is responsible to generate Service layer for all generated Dao',
        homepage: 'http://www.nodics.com/nodics/framework/ndao',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework\\nDao' },
  ndatabase:
   { metaData:
      { name: 'ndatabase',
        index: '3',
        description: 'Nodics configuration module. It will hold all Database related configuration',
        homepage: 'http://www.nodics.com/nodics/framework/ndatabase',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework\\nDatabase' },
  nrouter:
   { metaData:
      { name: 'nrouter',
        index: '8',
        description: 'This module is responsible to setup express routers for all modules',
        homepage: 'http://www.nodics.com/nodics/framework/nrouter',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\framework\\nRouter' },
  user:
   { metaData:
      { name: 'user',
        index: '21',
        exposeAPI: 'true',
        exposeDao: 'true',
        description: 'Nodics configuration module. It will hold all user\'s model and services',
        homepage: 'http://www.nodics.com/nodics/user/',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\user',
     dao:
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function: lazyrouter],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function: listen],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 1,
        locals: [Object],
        mountpath: '/',
        _router: [Object] },
     app:
      { [EventEmitter: app]
        domain: undefined,
        _events: [Object],
        _maxListeners: undefined,
        setMaxListeners: [Function: setMaxListeners],
        getMaxListeners: [Function: getMaxListeners],
        emit: [Function: emit],
        addListener: [Function: addListener],
        on: [Function: addListener],
        prependListener: [Function: prependListener],
        once: [Function: once],
        prependOnceListener: [Function: prependOnceListener],
        removeListener: [Function: removeListener],
        removeAllListeners: [Function: removeAllListeners],
        listeners: [Function: listeners],
        listenerCount: [Function: listenerCount],
        eventNames: [Function: eventNames],
        init: [Function: init],
        defaultConfiguration: [Function: defaultConfiguration],
        lazyrouter: [Function: lazyrouter],
        handle: [Function: handle],
        use: [Function: use],
        route: [Function: route],
        engine: [Function: engine],
        param: [Function: param],
        set: [Function: set],
        path: [Function: path],
        enabled: [Function: enabled],
        disabled: [Function: disabled],
        enable: [Function: enable],
        disable: [Function: disable],
        acl: [Function],
        bind: [Function],
        checkout: [Function],
        connect: [Function],
        copy: [Function],
        delete: [Function],
        get: [Function],
        head: [Function],
        link: [Function],
        lock: [Function],
        'm-search': [Function],
        merge: [Function],
        mkactivity: [Function],
        mkcalendar: [Function],
        mkcol: [Function],
        move: [Function],
        notify: [Function],
        options: [Function],
        patch: [Function],
        post: [Function],
        propfind: [Function],
        proppatch: [Function],
        purge: [Function],
        put: [Function],
        rebind: [Function],
        report: [Function],
        search: [Function],
        subscribe: [Function],
        trace: [Function],
        unbind: [Function],
        unlink: [Function],
        unlock: [Function],
        unsubscribe: [Function],
        all: [Function: all],
        del: [Function],
        render: [Function: render],
        listen: [Function: listen],
        request: [Object],
        response: [Object],
        cache: {},
        engines: {},
        settings: [Object],
        _eventsCount: 1,
        locals: [Object],
        mountpath: '/' } },
  server:
   { metaData:
      { name: 'server',
        index: '100',
        description: 'Nodics applicaion module. It will hold all configuration and server point to start nodics',
        homepage: 'http://www.nodics.com/nodics/server/',
        keywords: [Array],
        author: 'Himkar Dwivedi <himkar.dwivedi@nodics.com>',
        main: 'nodics.js',
        version: '0.0.1',
        private: true,
        license: 'MIT License',
        repository: [Object] },
     modulePath: 'D:\\NodicsHub\\Nodics\\server' } }