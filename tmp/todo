
Todos:
  New:
    ✔ Update updated timestamp for each item update @done(18-03-04 23:42)
    ✔ Handle Dynamic property handler - Dynamic Attributs can be handled via Mongoose virtuals, Like: @done(18-03-05 18:13)
    ✘ Add hook for each layer and each method level @cancelled(18-04-05 10:42)
    ✔ Start all Active cronJobs on start-up @done(18-03-09 22:25)
    ✔ Only active jobs need to be executed @done(18-03-12 23:36)
    ✔ Test cronJob update/remove while its running, if it is working fine @done(18-03-12 23:36)
    ✔ Make custom code seperate from Nodics Home directory @done(18-03-05 21:16)
    ✔ Define namespace capability - load cleasses from sub-folders @done(18-03-09 22:25)
    ✔ Add Service to return sample request object for all the services. @done(18-04-05 10:42)
    - Implement Jsdoc NPM to generate JavaScript Docs
    ✔ Make all framework load Prmoisify (Loading all modules in sequence) @done(18-03-05 22:50)
    ✔ Make item and API TTL at configuration level @done(18-03-04 22:39)
    
    - Build common event Listener for all module (May be for cache invalidation)
    - Clustered Event execution process
    ✔ Authentication and Authorization for background processes like CronJob Execution @done(18-03-09 22:24)
    ✔ Create default data import process @done(18-03-09 22:24)

    ✔ Data Import process @done(18-03-07 11:33)
    https://hackernoon.com/functional-javascript-resolving-promises-sequentially-7aac18c4431e
    http://bluebirdjs.com/docs/api/promise.each.html
    - Data Export process

    ✔ Client for TibcoEMS @done(18-03-19 12:10)
    ✔ Client for ActiveMQ @done(18-03-05 22:53)
    ✔ Client for Kafka @done(18-03-05 22:53)

    ✔ Check if Test Cases are loading properly from environment location @done(18-03-12 21:59)
    ✔ Check if Data is loading properly from environment location @done(18-03-12 22:00)

    ✔ Execute Test cases from API - Done @done(18-03-04 21:00)
    ✔ Connect Test DB only if required (Check may be its working like this only) - Not possible, If I need to run @done(18-03-04 21:00) test cases from API will not work. - Done @done(18-03-04 21:00)

    ✔ Password create, update and reset @done(18-03-12 12:41)
    ✔ Lock after secified login attempts @done(18-03-12 12:41)
    ✔ Password un-lock system @done(18-03-12 12:41)

    - Check data import with multi application, multi environment and multi server
    - Check Test loader with multi application, multi environment and multi server

    ✔ Implement Logger @done(18-03-18 12:11)
      ✔ Console logger @done(18-03-18 12:11)
      ✔ File Logger @done(18-03-18 12:11)
      ✔ External Logger write to Elastic @done(18-03-18 12:11)
      ✔ Update individual entity log level @done(18-03-18 12:12)
    ✔ Changes in Router definitions @done(18-03-18 12:13)

    - Monitoring tool - 
    https://www.nearform.com/blog/how-to-build-a-real-time-node-js-performance-monitoring-system/


    ✔ Change Listener register definition @done(18-03-26 11:18)
    ✔ Start cronJob with given optional Item model @done(18-03-26 14:59)
    - Pass import data via Process to customize it further
    - Plug Hot folder process
    - Try to make process synchronous 
    ✔ Application debug --inspect @done(18-03-31 15:14)
    ✔ I am live functionality (Server ping machanizm) @done(18-03-31 14:43)
    ✔ Add EMS connectivity in Nodics Architecture diagrame @done(18-03-31 14:26)
    ✔ Test app with individual port startup @done(18-03-31 18:17)
    ✔ Refector Person schema for last login and number of failed logins @done(18-04-03 17:59)
    ✔ Each router should return detail on ?help @done(18-04-05 10:42)

    ✔ Store auth token in each module @done(18-04-27 13:10)
    ✔ Invalidate auth token from each module @done(18-04-27 13:10)

    - Pipeline error handling
    - Verify Save and Get pipeline and sub pipelines
    - Save sub models and update references
    - Default Value validators
    - Create primery keys
    - Create Indexes
    - Schema Validators
    - Implement update pipeline
    
    - Don't load test cases while server start-up instead while executing
    - Run individual test case from API for both type
    ✔ Make context root at module server level, for communicating between modules @done(18-04-27 13:10)
    - Document complete server configuration for start and connect
    ✔ Test events and other communicating properly for nodeId and abstract @done(18-04-27 13:11)
    - Remove App server configuration from all module config, so that it can start on default
    - Keep only default App server configuration, that can be redefined in respective servers
    - Validate Enterprise change or Authorization change in terms of authToken storing for each module
    - Check authToken invalidation logic for each module 
    - Check event publishing happening in interceptor on Enterprise or Person Update


Todos:
  User management process:
    - Create some default user groups for Employee and Customer
    - Each user needs to per part of at least one group
    
Todos:
  - Test merge process for multi hiererchy function definitions within service
  Multi-Language Support:
    - Support schema to define multi language support (https://www.npmjs.com/package/mongoose-intl)
    - Support Nodics to fetch langauge specific data on each query

  Event Processing System:
    - Test Asynchronous events
    - Build Sync events process

  Tenant Management:
    - As soon as new tenant got register, make it live within system
    - If tenant is not associated with any Enterprise, Don't load it

  Process Changes:
    ✔ Support multiple success node redirect @done(18-07-08 14:23)
    ✔ Support multiple failure node redirect @done(18-07-08 14:23)
    
Todos:
  - Provide validators from both Nodics and Schema level
  - Provide default value initializer from both level
  - Create update service to update Schema related changes, like validators, indexes and all
  - Add Watcher configuration at schema level, and push notifications to EMS
  - Create service to run indexes update
  Cassandra Support task:
    - Configure conection setting separate for mongodb and cassandra
    - Create schema file separate for both mongo and cassandra (mongodbSchema and cassandraSchema)

Todos:
  - Trigger import process from API or internal service call
  - Configuration hold an array of Paths from where data needs to be read and data type like: init, core or sample
  - Load Module specific data from file
  - Load data sequentially
  - Need manage data internal dependancy
  - Need to manage Multi file upload
  - Need to manage Big file upload
  - Define data definition in seperate files
  
  Data Import Process:
    - If model has macro defined, got to model define in rawSchema and fine relation type, and relation model name.
    - Load all active data, while calling import service, not while server startup
    - Load data only for modules are active for that instance
    - https://stackoverflow.com/questions/42896447/parse-large-json-file-in-nodejs-and-handle-each-object-independently
    - Split into files, if file size is greater than specific size
    
    Initial Data Import Process:
      
    Code Data Import Process:
    Sample Data Import Process:
  
  Data Export Process:

  Cache:
    - Check process to update cache configuration via API

  Authorization Process:
    - Keep authentication credantials mapped with authToken
    - On expiration, re-generate authToken
    - Change all current implementation for backoffice processes
    - Backoffice process shouldn't ask authToken at startup, generate and regenerate at first hit or on expiration
    - Authentication from external source (Feasibility and Implementation)
    
  Cache Configuration:
    - Change cache configuration at module level
    - Invalidate API and Item cache at module level

  Change Log configuration:
    - Change log configuration at module level
    - Enable/Disable log level at module level

Todos:
  Documentation Points:
    - Layered Architecture support to extend and generalize code in layered
    - Bussiness level shared functionality - Layered Architecture
    - Distrubuted module management - Diployment topology - Layered Architecture
    - Multi-Application management - each application may use different set of modules
    - Database handling with MongoDB
    - Module-Specific database support
    - Multi-Enterprise with Multi tenancy support
    - Micro-Services Development and deployment support
    - Test-Case framework
      - Module Specific test cases
      - Application Specific test cases
      - Environment Specific test cases
      - Push-Pop and only Pop test cases execution
    - Data Import process
      - Initial data load
      - Core data load
      - Sample data load
      - Application Specific data load
      - Environment Specific data load
    - Scheduled activity execution support - CronJobs
    - Modular Event management system support
    - Schema lyfe cycle management
    - Process creation and management system
    - Secured, un-secured and special request handler support
    - Tow level Distributed cache management system (Application and module specific)
    - Messaging system support with
      - Tibco message push and pop
      - ActiveMQ message push and pop
      - Kafka message push and pop
    - Full documentation and Real time support
    - Winston Logger support with multi-transport and file level enable/disable 
    - Configuration each modules server to connect each other


    https://medium.com/styled-components/the-simple-guide-to-server-side-rendering-react-with-styled-components-d31c6b2b8fbf

Issues:
  - listCollections return whole collection object with 

BakwasKeeda:
  - db.createUser( { user: "bakwaskeeda", pwd: "bakwaskeeda@15021981", roles: [ { role: "readWriteAnyDatabase", db: "admin" }, { role: "userAdminAnyDatabase", db: "admin" } ] } )
  127.0.0.1:27017 - mongodb
  Successfully added user: {
    "user" : "bakwaskeeda",
    "roles" : [
      {
        "role" : "readWriteAnyDatabase",
        "db" : "admin"
      },
      {
        "role" : "userAdminAnyDatabase",
        "db" : "admin"
      }
    ]
  }