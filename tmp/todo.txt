https://medium.com/adobe-io/how-to-combine-rest-api-calls-with-javascript-promises-in-node-js-or-openwhisk-d96cbc10f299


https://github.com/mochajs/mocha/wiki/Using-mocha-programmatically
https://stackoverflow.com/questions/29050720/run-mocha-programatically-and-pass-results-to-variable-or-function
https://stackoverflow.com/questions/33394073/access-result-when-running-mocha-programmatically



1. Implement update if exist and create if not. - this  not required, let client handle this scenario - done
2. extends some default properties like creation date, update date and code for all model - done
3. add property in schema, if model and services needs to be created - done
- Need to finalize operations interceptors - Done
4. Add pre-add validator to check if default properties have values - inprogress
5. Set some of the default values, like createdDate and updatedDate
6. Handle dynamic property handler

- Add custom DAO API to test other then outomatic - done
- Create default service layer to access DAO API - dome modelServices created

- Add hook for each layer and each method level - 

----------------------------------------------------------------------------------------------------------------
All Priority ONE Task
- Handle CronJob functions error returns for services (Looks problem for start, stop and remove Jobs)
- Test cronJob update/remove while its running, if it is working fine
- Handle callback process for all these function - done
- Verify Process error scenarios, while calling process.error method from function
- Refine startup process little more. like load module setting and startup parameters
- All three required param can be passed as startup arguments
- SERVER_PATH needs to be relative or one time setting within Nodics installation
- Make possoble custom application to keep out-side of Nodics
- OOTB module dependancy needs to be managed properly
- Define property configuration to load list of modules to be loaded
- Separete Schema and Service Enum definitions (https://github.com/adrai/enum) - Done
- Schema validators are not working currently
- Validate if Interceptors are working fine for default and module specific
- Verify if 'model' and 'service' properties are working fine
- Make possibility to delete predefined process or node
- Only active jobs need to be executed
- Set duration of job activeness 
- Define a common Service, Facade and Controller which will be merged in every layer
- Define namespace capability - load cleasses from sub-folders

All Priority TWO Task
- All required modules need to be identified at run time
- Keep list of modules required in a property in package.json file
- Create separete 'updateDepandancy.js' to update depandancy and keep somewhere, so run time process can pick it up.
- Keeping is separatly is just to increase application start-up performance
- Make elastic search configurable with Schema type
- Redis Cache System
- Add Service to return sample request object for all the services.
- Implement Jsdoc NPM to generate JavaScript Docs
- Dynamic Attributs can be handled via Mongoose virtuals, Like:

personSchema.virtual('fullName').get(function () {
  return this.name.first + ' ' + this.name.last;
});


=> CronJob module
- Work for timezone and running context - these both needs to be taken from user context, 
which will be implemented with NAAMS - Nodics Authentication Authorization Management System
- (5) Have TriggerType to make ranges configurable. Currently supports only expression
- Priority needs to be updated
- Cronjob update process - This process needs to be manage via NEMS - Nodics Event Management System
- Run cronjob by service call - Done
- Error handling on running call and onCompleted - Done